import Foundation
import CoreBluetooth
import Combine

// KeyboardGW„ÅÆÊé•Á∂öÁä∂ÊÖã„ÇíÁÆ°ÁêÜ„Åô„Çã„ÇØ„É©„Çπ
class KeyboardGWManager: NSObject, ObservableObject {
    // „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
    static let shared = KeyboardGWManager()
    
    // MARK: - Published Properties
    @Published var isConnected: Bool = false
    @Published var isScanning: Bool = false
    @Published var discoveredDevices: [CBPeripheral] = []
    @Published var connectionStatus: String = "Êú™Êé•Á∂ö"
    @Published var batteryLevel: Int = -1
    @Published var deviceName: String = ""
    
    // MARK: - Private Properties
    private var centralManager: CBCentralManager!
    private var connectedPeripheral: CBPeripheral?
    private var shortcutCharacteristic: CBCharacteristic?
    private var statusCharacteristic: CBCharacteristic?
    private var pairingCharacteristic: CBCharacteristic?
    private var savedPeripheralIdentifier: UUID?
    private var isAutoReconnecting: Bool = false
    
    // BLE UUIDs (KeyboardGW„ÅÆConfig.h„Å®‰∏ÄËá¥„Åï„Åõ„Çã)
    private let serviceUUID = CBUUID(string: "12345678-1234-1234-1234-123456789ABC")
    private let shortcutCharUUID = CBUUID(string: "12345678-1234-1234-1234-123456789ABD")
    private let statusCharUUID = CBUUID(string: "12345678-1234-1234-1234-123456789ABE")
    private let pairingCharUUID = CBUUID(string: "12345678-1234-1234-1234-123456789ABF")
    
    // MARK: - Initialization
    private override init() {
        super.init()
        centralManager = CBCentralManager(delegate: self, queue: nil)
        loadSavedPeripheral()
    }
    
    // MARK: - Auto-reconnection methods
    
    /// ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éê„Ç§„ÇπÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø
    private func loadSavedPeripheral() {
        if let savedUUIDString = UserDefaults.standard.string(forKey: "SavedPeripheralUUID"),
           let savedUUID = UUID(uuidString: savedUUIDString) {
            savedPeripheralIdentifier = savedUUID
            print("üíæ ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éê„Ç§„ÇπÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø: \(savedUUIDString)")
        }
    }
    
    /// „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„Çí‰øùÂ≠ò
    private func savePeripheral(_ peripheral: CBPeripheral) {
        savedPeripheralIdentifier = peripheral.identifier
        UserDefaults.standard.set(peripheral.identifier.uuidString, forKey: "SavedPeripheralUUID")
        UserDefaults.standard.set(peripheral.name, forKey: "SavedPeripheralName")
        print("üíæ „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„Çí‰øùÂ≠ò: \(peripheral.name ?? "Unknown") (\(peripheral.identifier))")
    }
    
    /// ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éê„Ç§„Çπ„Å´Ëá™ÂãïÂÜçÊé•Á∂ö„ÇíË©¶Ë°å
    private func attemptAutoReconnection() {
        guard let savedUUID = savedPeripheralIdentifier,
              centralManager.state == .poweredOn,
              !isConnected && !isAutoReconnecting else {
            return
        }
        
        isAutoReconnecting = true
        
        DispatchQueue.main.async {
            self.connectionStatus = "ÂâçÂõûÊé•Á∂ö„Éá„Éê„Ç§„Çπ„Å´ÂÜçÊé•Á∂ö‰∏≠..."
        }
        
        // ‰øùÂ≠ò„Åï„Çå„ÅüUUID„Åß„Éá„Éê„Ç§„Çπ„ÇíÂèñÂæó
        let knownPeripherals = centralManager.retrievePeripherals(withIdentifiers: [savedUUID])
        
        if let peripheral = knownPeripherals.first {
            print("üîÑ ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éê„Ç§„Çπ„Å´Ëá™ÂãïÂÜçÊé•Á∂öË©¶Ë°å: \(peripheral.name ?? "Unknown")")
            connect(to: peripheral)
        } else {
            print("üîÑ ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éê„Ç§„Çπ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„ÄÅ„Çπ„Ç≠„É£„É≥„ÇíÈñãÂßã")
            isAutoReconnecting = false
            startScanning()
        }
    }
    
    // MARK: - Public Methods
    
    /// „Éá„Éê„Ç§„Çπ„ÅÆ„Çπ„Ç≠„É£„É≥„ÇíÈñãÂßã
    func startScanning() {
        startScanning(withServiceFilter: true)
    }
    
    /// „Éá„Éê„Ç§„Çπ„ÅÆ„Çπ„Ç≠„É£„É≥„ÇíÈñãÂßãÔºà„Éï„Ç£„É´„Çø„ÉºÊåáÂÆöÂèØËÉΩÔºâ
    func startScanning(withServiceFilter useFilter: Bool = true) {
        guard centralManager.state == .poweredOn else {
            DispatchQueue.main.async {
                self.connectionStatus = "Bluetooth„ÅåÁÑ°Âäπ„Åß„Åô"
            }
            print("‚ùå BluetoothÁÑ°Âäπ„Åß„Çπ„Ç≠„É£„É≥ÈñãÂßã„Åß„Åç„Åæ„Åõ„Çì")
            return
        }
        
        print("üîç „Çπ„Ç≠„É£„É≥ÈñãÂßã („Éï„Ç£„É´„Çø„Éº: \(useFilter))")
        
        DispatchQueue.main.async {
            self.isScanning = true
            self.discoveredDevices.removeAll()
            self.connectionStatus = useFilter ? "„Éá„Éê„Ç§„ÇπÊ§úÁ¥¢‰∏≠..." : "ÂÖ®„Éá„Éê„Ç§„ÇπÊ§úÁ¥¢‰∏≠..."
        }
        
        // „Éá„Éê„ÉÉ„Ç∞Áî®: „Éï„Ç£„É´„Çø„Éº„ÅÇ„Çä„Å™„Åó„ÇíÈÅ∏ÊäûÂèØËÉΩ
        if useFilter {
            centralManager.scanForPeripherals(
                withServices: [serviceUUID],
                options: [CBCentralManagerScanOptionAllowDuplicatesKey: false]
            )
        } else {
            // „Éï„Ç£„É´„Çø„Éº„Å™„Åó„Çπ„Ç≠„É£„É≥Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
            centralManager.scanForPeripherals(
                withServices: nil,
                options: [CBCentralManagerScanOptionAllowDuplicatesKey: false]
            )
        }
        
        // 15ÁßíÂæå„Å´„Çπ„Ç≠„É£„É≥„ÇíÂÅúÊ≠¢
        DispatchQueue.main.asyncAfter(deadline: .now() + 15) {
            self.stopScanning()
        }
    }
    
    /// „Éá„Éê„Ç§„Çπ„ÅÆ„Çπ„Ç≠„É£„É≥„ÇíÂÅúÊ≠¢
    func stopScanning() {
        centralManager.stopScan()
        DispatchQueue.main.async {
            self.isScanning = false
            if self.discoveredDevices.isEmpty && !self.isConnected {
                self.connectionStatus = "„Éá„Éê„Ç§„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
            }
        }
        print("üîç „Çπ„Ç≠„É£„É≥ÂÅúÊ≠¢")
    }
    
    /// ÊåáÂÆö„Åó„Åü„Éá„Éê„Ç§„Çπ„Å´Êé•Á∂ö
    func connect(to peripheral: CBPeripheral) {
        stopScanning()
        DispatchQueue.main.async {
            self.connectionStatus = "Êé•Á∂ö‰∏≠..."
            self.connectedPeripheral = peripheral
        }
        centralManager.connect(peripheral, options: nil)
        print("üîå Êé•Á∂öË©¶Ë°å: \(peripheral.name ?? "Unknown")")
    }
    
    /// ÁèæÂú®„ÅÆ„Éá„Éê„Ç§„Çπ„Åã„ÇâÂàáÊñ≠
    func disconnect() {
        if let peripheral = connectedPeripheral {
            centralManager.cancelPeripheralConnection(peripheral)
        }
    }
    
    /// „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≥„Éû„É≥„Éâ„ÇíÈÄÅ‰ø°
    func sendShortcut(keys: [String]) {
        guard let characteristic = shortcutCharacteristic,
              let peripheral = connectedPeripheral,
              peripheral.state == .connected else {
            print("‚ùå „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÈÄÅ‰ø°Â§±ÊïóÔºö„Éá„Éê„Ç§„Çπ„ÅåÊé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
            return
        }
        
        let command = [
            "keys": keys,
            "keyCount": keys.count,
            "delay": 50
        ] as [String : Any]
        
        guard let jsonData = try? JSONSerialization.data(withJSONObject: command),
              let jsonString = String(data: jsonData, encoding: .utf8) else {
            print("‚ùå JSON„Éá„Éº„Çø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó")
            return
        }

        // Debug: log the exact JSON payload being sent so we can verify on Xcode console
        print("üî§ Sending JSON payload: \(jsonString)")
        print("üî§ JSON length: \(jsonString.count) bytes")
        
        let data = jsonString.data(using: .utf8)!
        print("üî§ Data length: \(data.count) bytes")
        
        // Check MTU to ensure single packet transmission
        let mtu = peripheral.maximumWriteValueLength(for: .withResponse)
        print("üî§ MTU for withResponse: \(mtu) bytes")
        
        if data.count > mtu {
            print("‚ö†Ô∏è Payload (\(data.count) bytes) exceeds MTU (\(mtu) bytes) - may fragment")
            // Try with withoutResponse for larger MTU
            let mtuWithoutResponse = peripheral.maximumWriteValueLength(for: .withoutResponse)
            print("üî§ MTU for withoutResponse: \(mtuWithoutResponse) bytes")
            if data.count <= mtuWithoutResponse {
                print("‚úÖ Using withoutResponse to avoid fragmentation")
                peripheral.writeValue(data, for: characteristic, type: .withoutResponse)
            } else {
                print("‚ùå Payload too large even for withoutResponse")
                return
            }
        } else {
            // Debug: print data as hex for verification
            let hexString = data.map { String(format: "%02x", $0) }.joined()
            print("üì§ Sending data (\(data.count) bytes):")
            print("   JSON: \(jsonString)")
            print("   HEX: \(hexString)")
            peripheral.writeValue(data, for: characteristic, type: .withResponse)
        }
        
        print("üì§ „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÈÄÅ‰ø°Ôºö\(keys.joined(separator: "+"))")
    }
    
    // MARK: - Private Methods
    
    private func setupCharacteristics(for peripheral: CBPeripheral) {
        guard let service = peripheral.services?.first(where: { $0.uuid == serviceUUID }) else {
            print("‚ùå „Çµ„Éº„Éì„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
            return
        }
        
        for characteristic in service.characteristics ?? [] {
            switch characteristic.uuid {
            case shortcutCharUUID:
                shortcutCharacteristic = characteristic
                print("‚úÖ „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÁâπÊÄß„ÇíË®≠ÂÆö")
                
            case statusCharUUID:
                statusCharacteristic = characteristic
                // „Çπ„ÉÜ„Éº„Çø„ÇπÈÄöÁü•„ÇíÊúâÂäπÂåñ
                peripheral.setNotifyValue(true, for: characteristic)
                print("‚úÖ „Çπ„ÉÜ„Éº„Çø„ÇπÁâπÊÄß„ÇíË®≠ÂÆöÔºàÈÄöÁü•ÊúâÂäπÔºâ")
                
            case pairingCharUUID:
                pairingCharacteristic = characteristic
                print("‚úÖ „Éö„Ç¢„É™„É≥„Ç∞ÁâπÊÄß„ÇíË®≠ÂÆö")
                
            default:
                break
            }
        }
    }
}

// MARK: - CBCentralManagerDelegate
extension KeyboardGWManager: CBCentralManagerDelegate {
    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        print("üîÑ BluetoothÁä∂ÊÖãÂ§âÊõ¥: \(central.state.rawValue)")
        switch central.state {
        case .poweredOn:
            DispatchQueue.main.async {
                self.connectionStatus = "Ê∫ñÂÇôÂÆå‰∫Ü"
            }
            print("‚úÖ BluetoothÊ∫ñÂÇôÂÆå‰∫Ü")
            // Ëá™ÂãïÂÜçÊé•Á∂ö„ÇíË©¶Ë°å
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self.attemptAutoReconnection()
            }
        case .poweredOff:
            DispatchQueue.main.async {
                self.connectionStatus = "Bluetooth„Åå„Ç™„Éï„Åß„Åô"
                self.isConnected = false
                self.isScanning = false
            }
            print("‚ùå Bluetooth„Åå„Ç™„Éï")
        case .unauthorized:
            DispatchQueue.main.async {
                self.connectionStatus = "Bluetooth‰ΩøÁî®„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
                self.isConnected = false
                self.isScanning = false
            }
            print("‚ùå Bluetooth‰ΩøÁî®Ë®±ÂèØ„Å™„Åó")
        case .unsupported:
            DispatchQueue.main.async {
                self.connectionStatus = "Bluetooth„Åå„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
            }
            print("‚ùå Bluetooth„Çµ„Éù„Éº„Éà„Å™„Åó")
        case .resetting:
            DispatchQueue.main.async {
                self.connectionStatus = "Bluetooth„É™„Çª„ÉÉ„Éà‰∏≠..."
                self.isConnected = false
                self.isScanning = false
            }
            print("‚ö†Ô∏è Bluetooth„É™„Çª„ÉÉ„Éà‰∏≠")
        default:
            DispatchQueue.main.async {
                self.connectionStatus = "BluetoothÁä∂ÊÖã‰∏çÊòé"
            }
            print("‚ö†Ô∏è BluetoothÁä∂ÊÖã‰∏çÊòé: \(central.state)")
        }
    }
    
    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {
        // „Åô„Åß„Å´Áô∫Ë¶ãÊ∏à„Åø„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        guard !discoveredDevices.contains(where: { $0.identifier == peripheral.identifier }) else {
            return
        }
        
        // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË©≥„Åó„ÅèÂá∫Âäõ
        print("üîç „Éá„Éê„Ç§„ÇπÁô∫Ë¶ãÔºö\(peripheral.name ?? "Unknown") (\(RSSI)dBm)")
        print("   UUID: \(peripheral.identifier)")
        print("   Â∫ÉÂëä„Éá„Éº„Çø: \(advertisementData)")
        
        // KeyboardGWÈñ¢ÈÄ£„ÅÆ„Éá„Éê„Ç§„Çπ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        let name = peripheral.name ?? ""
        let isKeyboardGW = name.contains("EasyShortcutKey") || name.contains("KeyboardGW") || name.contains("shortcut")
        
        if isKeyboardGW {
            print("   ‚úÖ KeyboardGWÈñ¢ÈÄ£„Éá„Éê„Ç§„Çπ„ÇíÁô∫Ë¶ãÔºÅ")
        }
        
        // „É°„Ç§„É≥„Çπ„É¨„ÉÉ„Éâ„ÅßUIÊõ¥Êñ∞
        DispatchQueue.main.async {
            // ÂÖ®„Éá„Éê„Ç§„ÇπÊ§úÁ¥¢„É¢„Éº„Éâ„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            let isFullScanMode = self.connectionStatus.contains("ÂÖ®„Éá„Éê„Ç§„ÇπÊ§úÁ¥¢‰∏≠")
            
            if isFullScanMode {
                // ÂÖ®„Éá„Éê„Ç§„Çπ„Çπ„Ç≠„É£„É≥„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÂÖ®„Å¶ËøΩÂä†
                self.discoveredDevices.append(peripheral)
                print("   üì± ÂÖ®„Éá„Éê„Ç§„Çπ„Çπ„Ç≠„É£„É≥„Åß„Éá„Éê„Ç§„Çπ„ÇíËøΩÂä†")
            } else if isKeyboardGW {
                // ÈÄöÂ∏∏„Çπ„Ç≠„É£„É≥„Åß„ÇÇKeyboardGW„ÅØËøΩÂä†ÔºàÂêçÂâç„Éô„Éº„Çπ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºâ
                self.discoveredDevices.append(peripheral)
                print("   üì± ÈÄöÂ∏∏„Çπ„Ç≠„É£„É≥„ÅßKeyboardGW„Éá„Éê„Ç§„Çπ„ÇíËøΩÂä†")
            }
        }
    }
    
    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        print("‚úÖ Êé•Á∂öÊàêÂäüÔºö\(peripheral.name ?? "Unknown")")
        
        // „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„Çí‰øùÂ≠òÔºàËá™ÂãïÂÜçÊé•Á∂öÁî®Ôºâ
        savePeripheral(peripheral)
        isAutoReconnecting = false
        
        // „É°„Ç§„É≥„Çπ„É¨„ÉÉ„Éâ„ÅßUIÊõ¥Êñ∞
        DispatchQueue.main.async {
            self.isConnected = true
            self.deviceName = peripheral.name ?? "KeyboardGW"
            self.connectionStatus = "Êé•Á∂öÊ∏à„Åø"
        }
        
        peripheral.delegate = self
        peripheral.discoverServices([serviceUUID])
        
        // 3ÁßíÂæå„Å´„ÉÜ„Çπ„ÉàÊé•Á∂öÁ¢∫Ë™ç„ÇíÈÄÅ‰ø°
        DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
            self.sendConnectionTest()
        }
    }
    
    /// Êé•Á∂ö„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°Ôºà„Éá„Éê„Ç§„ÇπÂÅ¥„ÅÆLEDÊõ¥Êñ∞„Çí‰øÉ„Åô„Åü„ÇÅÔºâ
    private func sendConnectionTest() {
        guard let characteristic = shortcutCharacteristic,
              let peripheral = connectedPeripheral,
              peripheral.state == .connected else {
            print("‚ùå Êé•Á∂ö„ÉÜ„Çπ„ÉàÂ§±ÊïóÔºö„Éá„Éê„Ç§„Çπ„ÅåÊé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
            return
        }
        
        // Log MTU information after connection
        let mtuWithResponse = peripheral.maximumWriteValueLength(for: .withResponse)
        let mtuWithoutResponse = peripheral.maximumWriteValueLength(for: .withoutResponse)
        print("üìä MTUÊÉÖÂ†± - withResponse: \(mtuWithResponse), withoutResponse: \(mtuWithoutResponse)")
        
        let testCommand = [
            "keys": [""],  // Á©∫„ÅÆ„Ç≠„ÉºÔºàÂÆüÈöõ„Å´„ÅØ‰Ωï„ÇÇÈÄÅ‰ø°„Åó„Å™„ÅÑÔºâ
            "keyCount": 0,
            "test": true
        ] as [String : Any]
        
        guard let jsonData = try? JSONSerialization.data(withJSONObject: testCommand),
              let jsonString = String(data: jsonData, encoding: .utf8) else {
            print("‚ùå Êé•Á∂ö„ÉÜ„Çπ„ÉàJSON„Éá„Éº„Çø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó")
            return
        }
        
        print("üî§ Test JSON: \(jsonString)")
        let data = jsonString.data(using: .utf8)!
        peripheral.writeValue(data, for: characteristic, type: .withoutResponse)
        print("üì§ Êé•Á∂ö„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°")
    }
    
    func centralManager(_ central: CBCentralManager, didFailToConnect peripheral: CBPeripheral, error: Error?) {
        print("‚ùå Êé•Á∂öÂ§±ÊïóÔºö\(error?.localizedDescription ?? "Unknown error")")
        
        isAutoReconnecting = false
        
        // „É°„Ç§„É≥„Çπ„É¨„ÉÉ„Éâ„ÅßUIÊõ¥Êñ∞
        DispatchQueue.main.async {
            self.connectionStatus = "Êé•Á∂öÂ§±Êïó"
            self.connectedPeripheral = nil
        }
    }
    
    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {
        print("üîå „Éá„Éê„Ç§„ÇπÂàáÊñ≠Ôºö\(peripheral.name ?? "Unknown")")
        
        // „É°„Ç§„É≥„Çπ„É¨„ÉÉ„Éâ„ÅßUIÊõ¥Êñ∞
        DispatchQueue.main.async {
            self.isConnected = false
            self.connectionStatus = "Êú™Êé•Á∂ö"
            self.deviceName = ""
            self.connectedPeripheral = nil
            self.shortcutCharacteristic = nil
            self.statusCharacteristic = nil
            self.pairingCharacteristic = nil
        }
        
        if let error = error {
            print("‚ùå ÂàáÊñ≠„Ç®„É©„ÉºÔºö\(error.localizedDescription)")
            // ‰∫àÊúü„Åó„Å™„ÅÑÂàáÊñ≠„ÅÆÂ†¥Âêà„ÅØËá™ÂãïÂÜçÊé•Á∂ö„ÇíË©¶Ë°å
            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                self.attemptAutoReconnection()
            }
        }
    }
}

// MARK: - CBPeripheralDelegate
extension KeyboardGWManager: CBPeripheralDelegate {
    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        if let error = error {
            print("‚ùå „Çµ„Éº„Éì„ÇπÁô∫Ë¶ã„Ç®„É©„ÉºÔºö\(error.localizedDescription)")
            return
        }
        
        guard let services = peripheral.services else {
            print("‚ùå „Çµ„Éº„Éì„Çπ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
            return
        }
        
        for service in services {
            if service.uuid == serviceUUID {
                peripheral.discoverCharacteristics(
                    [shortcutCharUUID, statusCharUUID, pairingCharUUID],
                    for: service
                )
            }
        }
    }
    
    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if let error = error {
            print("‚ùå ÁâπÊÄßÁô∫Ë¶ã„Ç®„É©„ÉºÔºö\(error.localizedDescription)")
            return
        }
        
        setupCharacteristics(for: peripheral)
    }
    
    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if let error = error {
            print("‚ùå ÂÄ§Êõ¥Êñ∞„Ç®„É©„ÉºÔºö\(error.localizedDescription)")
            return
        }
        
        guard let data = characteristic.value else { return }
        
        if characteristic.uuid == statusCharUUID {
            // „Çπ„ÉÜ„Éº„Çø„ÇπÊÉÖÂ†±„ÇíÂèó‰ø°
            if let jsonString = String(data: data, encoding: .utf8),
               let jsonData = jsonString.data(using: .utf8),
               let json = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any] {
                
                DispatchQueue.main.async {
                    if let battery = json["battery"] as? Int {
                        self.batteryLevel = battery
                    }
                    if let status = json["status"] as? String {
                        self.connectionStatus = status
                    }
                }
            }
        }
    }
    
    func peripheral(_ peripheral: CBPeripheral, didWriteValueFor characteristic: CBCharacteristic, error: Error?) {
        if let error = error {
            print("‚ùå ÂÄ§Êõ∏„ÅçËæº„Åø„Ç®„É©„ÉºÔºö\(error.localizedDescription)")
        } else {
            print("‚úÖ ÂÄ§Êõ∏„ÅçËæº„ÅøÊàêÂäü")
        }
    }
}
